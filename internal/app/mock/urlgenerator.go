// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/urlgenerator/urlgenerator.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/urlgenerator/urlgenerator.go -destination=internal/app/mock/urlgenerator.go -package=mock URLGenerator
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockURLGenerator is a mock of URLGenerator interface.
type MockURLGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockURLGeneratorMockRecorder
	isgomock struct{}
}

// MockURLGeneratorMockRecorder is the mock recorder for MockURLGenerator.
type MockURLGeneratorMockRecorder struct {
	mock *MockURLGenerator
}

// NewMockURLGenerator creates a new mock instance.
func NewMockURLGenerator(ctrl *gomock.Controller) *MockURLGenerator {
	mock := &MockURLGenerator{ctrl: ctrl}
	mock.recorder = &MockURLGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLGenerator) EXPECT() *MockURLGeneratorMockRecorder {
	return m.recorder
}

// GenerateURL mocks base method.
func (m *MockURLGenerator) GenerateURL(longURL string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateURL", longURL)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateURL indicates an expected call of GenerateURL.
func (mr *MockURLGeneratorMockRecorder) GenerateURL(longURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateURL", reflect.TypeOf((*MockURLGenerator)(nil).GenerateURL), longURL)
}

// IsValidURL mocks base method.
func (m *MockURLGenerator) IsValidURL(shortURL string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidURL", shortURL)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidURL indicates an expected call of IsValidURL.
func (mr *MockURLGeneratorMockRecorder) IsValidURL(shortURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidURL", reflect.TypeOf((*MockURLGenerator)(nil).IsValidURL), shortURL)
}
