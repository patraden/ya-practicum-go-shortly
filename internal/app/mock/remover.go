// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/remover/remover.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/service/remover/remover.go -destination=internal/app/mock/remover.go -package=mock URLRemover
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/patraden/ya-practicum-go-shortly/internal/app/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockURLRemover is a mock of URLRemover interface.
type MockURLRemover struct {
	ctrl     *gomock.Controller
	recorder *MockURLRemoverMockRecorder
	isgomock struct{}
}

// MockURLRemoverMockRecorder is the mock recorder for MockURLRemover.
type MockURLRemoverMockRecorder struct {
	mock *MockURLRemover
}

// NewMockURLRemover creates a new mock instance.
func NewMockURLRemover(ctrl *gomock.Controller) *MockURLRemover {
	mock := &MockURLRemover{ctrl: ctrl}
	mock.recorder = &MockURLRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRemover) EXPECT() *MockURLRemoverMockRecorder {
	return m.recorder
}

// RemoveUserSlugs mocks base method.
func (m *MockURLRemover) RemoveUserSlugs(ctx context.Context, slugs []domain.Slug) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserSlugs", ctx, slugs)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserSlugs indicates an expected call of RemoveUserSlugs.
func (mr *MockURLRemoverMockRecorder) RemoveUserSlugs(ctx, slugs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserSlugs", reflect.TypeOf((*MockURLRemover)(nil).RemoveUserSlugs), ctx, slugs)
}
