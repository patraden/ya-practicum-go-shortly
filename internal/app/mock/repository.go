// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/repository/repository.go -destination=internal/app/mock/repository.go -package=mock URLRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	domain "github.com/patraden/ya-practicum-go-shortly/internal/app/domain"
)

// MockURLRepository is a mock of URLRepository interface.
type MockURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryMockRecorder
	isgomock struct{}
}

// MockURLRepositoryMockRecorder is the mock recorder for MockURLRepository.
type MockURLRepositoryMockRecorder struct {
	mock *MockURLRepository
}

// NewMockURLRepository creates a new mock instance.
func NewMockURLRepository(ctrl *gomock.Controller) *MockURLRepository {
	mock := &MockURLRepository{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepository) EXPECT() *MockURLRepositoryMockRecorder {
	return m.recorder
}

// AddURLMapping mocks base method.
func (m_2 *MockURLRepository) AddURLMapping(ctx context.Context, m *domain.URLMapping) (*domain.URLMapping, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "AddURLMapping", ctx, m)
	ret0, _ := ret[0].(*domain.URLMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddURLMapping indicates an expected call of AddURLMapping.
func (mr *MockURLRepositoryMockRecorder) AddURLMapping(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURLMapping", reflect.TypeOf((*MockURLRepository)(nil).AddURLMapping), ctx, m)
}

// AddURLMappingBatch mocks base method.
func (m *MockURLRepository) AddURLMappingBatch(ctx context.Context, batch *[]domain.URLMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddURLMappingBatch", ctx, batch)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddURLMappingBatch indicates an expected call of AddURLMappingBatch.
func (mr *MockURLRepositoryMockRecorder) AddURLMappingBatch(ctx, batch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURLMappingBatch", reflect.TypeOf((*MockURLRepository)(nil).AddURLMappingBatch), ctx, batch)
}

// GetURLMapping mocks base method.
func (m *MockURLRepository) GetURLMapping(ctx context.Context, slug domain.Slug) (*domain.URLMapping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLMapping", ctx, slug)
	ret0, _ := ret[0].(*domain.URLMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLMapping indicates an expected call of GetURLMapping.
func (mr *MockURLRepositoryMockRecorder) GetURLMapping(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLMapping", reflect.TypeOf((*MockURLRepository)(nil).GetURLMapping), ctx, slug)
}
