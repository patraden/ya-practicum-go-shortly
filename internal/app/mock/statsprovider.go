// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/statsprovider/statsprovider.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/service/statsprovider/statsprovider.go -destination=internal/app/mock/statsprovider.go -package=mock StatsProvider
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	dto "github.com/patraden/ya-practicum-go-shortly/internal/app/dto"
)

// MockStatsProvider is a mock of StatsProvider interface.
type MockStatsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockStatsProviderMockRecorder
	isgomock struct{}
}

// MockStatsProviderMockRecorder is the mock recorder for MockStatsProvider.
type MockStatsProviderMockRecorder struct {
	mock *MockStatsProvider
}

// NewMockStatsProvider creates a new mock instance.
func NewMockStatsProvider(ctrl *gomock.Controller) *MockStatsProvider {
	mock := &MockStatsProvider{ctrl: ctrl}
	mock.recorder = &MockStatsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsProvider) EXPECT() *MockStatsProviderMockRecorder {
	return m.recorder
}

// GetStats mocks base method.
func (m *MockStatsProvider) GetStats(ctx context.Context) (*dto.RepoStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(*dto.RepoStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockStatsProviderMockRecorder) GetStats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockStatsProvider)(nil).GetStats), ctx)
}
