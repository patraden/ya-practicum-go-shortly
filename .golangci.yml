# See https://golangci-lint.run/usage/linters/

linters:
  enable-all: true
  disable:
    - gomnd
    - gochecknoglobals
    - nilnil
    - execinquery
    - exportloopref
    - tparallel # redundant of paralleltest, which is configurable

linters-settings:
  # https://github.com/OpenPeeDeeP/depguard
  depguard:
    rules:
      main:
        list-mode: lax
        allow:
          - $gostd
  
  paralleltest:
    ignore-missing-subtests: true
  
  wsl:
    # Do strict checking when assigning from append (x = append(x, y)).
    # If this is set to true - the append call must append either a variable
    # assigned, called or used on the line above.
    # https://github.com/bombsimon/wsl/blob/master/doc/configuration.md#strict-append
    # Default: true
    strict-append: false
    # Allow multiple var/declaration statements to be cuddled.
    # https://github.com/bombsimon/wsl/blob/master/doc/configuration.md#allow-cuddle-declarations
    # Default: false
    allow-cuddle-declarations: true
  
  varnamelen:
    # The longest distance, in source lines, that is being considered a "small scope".
    # Variables used in at most this many lines will be ignored.
    # Default: 5
    max-distance: 15
    # The minimum length of a variable's name that is considered "long".
    # Variable names that are at least this long will be ignored.
    # Default: 3
    min-name-length: 3
    # Optional list of variable names that should be ignored completely.
    # Default: [
    ignore-names:
      - err
    # Optional list of variable declarations that should be ignored completely.
    # Entries must be in one of the following forms (see below for examples):
    # - for variables, parameters, named return values, method receivers, or type parameters:
    #   <name> <type>  (<type> can also be a pointer/slice/map/chan/...)
    # - for constants: const <name>
    #
    # Default: []
    ignore-decls:
      - t testing.T
      - e error
      - i int
      - w http.ResponseWriter
      - r *http.Request

  exhaustruct:
    # List of regular expressions to exclude struct packages and their names from checks.
    # Regular expressions must match complete canonical struct package/name/structname.
    # Default: []
    exclude:
      - '^net/url.URL$'
      - '^net/http.Server$'
      - '^net/http.Cookie$'
      - '^github\.com/jackc/pgx/v5\.TxOptions$'
      - '^github\.com/jackc/pgx/v5/pgconn\.PgError$'
      - '^github\.com/golang-jwt/jwt/v4\.RegisteredClaims$'
      - '^golang\.org/x/tools/go/analysis\.Analyzer$'
      - '^github\.com/patraden/ya-practicum-go-shortly/internal/app/mock\..*$'
      - '^github\.com/patraden/ya-practicum-go-shortly/internal/app/config\.Config$'
      - '^github\.com/patraden/ya-practicum-go-shortly/internal/app/domain\.URLMapping$'
      - '^github\.com/patraden/ya-practicum-go-shortly/internal/app/middleware\.Claims$'
      - '^github\.com/patraden/ya-practicum-go-shortly/internal/app/service/remover\.Batcher$'
      - '^github\.com/patraden/ya-practicum-go-shortly/internal/app/service/remover\.WorkerPool$'

  gosec:
  # To specify a set of rules to explicitly exclude.
  # Available rules: https://github.com/securego/gosec#available-rules
  # Default: []
    excludes:
      - G404 # Insecure random number source (rand)
  
  tagliatelle:
    # Check the struct tag name case.
    case:
      # `camel` is used for `json` and `yaml`, and `header` is used for `header` (can be overridden)
      # Default: {}
      rules:
        # Any struct tag type can be used.
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `upperSnake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`, `header`
        json: snake
  
  gci:
    sections:
      - standard
      - prefix(github.com/patraden/ya-practicum-go-shortly)
      - default


